name: Main Workflow
on: push
env: 
  docker_username: ${{github.actor}}
  docker_password: ${{secrets.GITHUB_TOKEN}}
  GIT_COMMIT: ${{github.sha}}
jobs:
  Sonar-Cloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build the project
        run: |
          ./gradlew build
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2  # Stable release
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=presandreichev
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  Snyk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Snyk Authentication
        run: snyk auth ${{ secrets.MY_SNYK }}
      - name: Run Snyk Test
        run: snyk test
      - name: Run Snyk Monitor
        run: snyk monitor
  Build:
    runs-on: ubuntu-latest
    container: gradle:6-jdk11
    steps:
      - name: Clone down repository
        uses: actions/checkout@v4
      - name: Build Application
        run: ci/build-app.sh
      - name: Test
        run: ci/unit-test-app.sh
      - name: Upload repo
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .
  Linting:
    runs-on: ubuntu-latest
    needs: [Build]
    steps:
      - name: Download Code
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: run linting
        uses: super-linter/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: true 
  Trivy:
    runs-on: ubuntu-latest
    needs: [Docker-image]
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget
          wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.43.1_Linux-64bit.deb | sudo dpkg -i -
      - name: Load Docker image for scanning
        run: docker load -i image.tar
      - name: Scan Docker image for vulnerabilities
        run: trivy image --severity HIGH,CRITICAL --exit-code 1 your_image_name:latest
        # replace "your_image_name" with the actual name of your image
  Tests:
    runs-on: ubuntu-latest
    needs: Docker-image
    steps:
    - name: Download code
      uses: actions/download-artifact@v4
      with:
        name: code
        path: .
    - name: Execute component test
      run: bash ci/component-test.sh
  Performance-test:
    runs-on: ubuntu-latest
    needs: Docker-image
    steps:
    - name: Download code
      uses: actions/download-artifact@v4
      with:
        name: code
        path: .
    - name: Execute performance test
      run: bash ci/performance-test.sh
    
  Docker-image:
    runs-on: ubuntu-latest
    needs: [Build]
    permissions:
      packages: write
    steps:
    - name: Download code
      uses: actions/download-artifact@v4
      with:
        name: code
        path: .
    - name: ls
      run: ls -la ci
    - name: build docker
      run: bash ci/build-docker.sh
    - name: push docker
      run: bash ci/push-docker.sh
  Push-DockerHub:
    runs-on: ubuntu-latest
    needs: [Trivy]
    steps:
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Tag Docker image
        run: docker tag your_image_name:latest your_dockerhub_username/your_image_name:latest
        # replace "your_image_name" and "your_dockerhub_username" with your Docker image and username
      - name: Push Docker image to DockerHub
        run: docker push your_dockerhub_username/your_image_name:latest
        # replace "your_image_name" and "your_dockerhub_username" with your Docker image and username
    
          
      
